{
  "title": "Intro to solana",
  "author": "shivam",
  "moduleNumber": "module-1",
  "modulePart": "module-1-a",
  "thisFileName": "solidity-program-compilation",
  "body": {
    "raw": "\n# Technical Architecture Comparison (Accounts on Both Platforms)\n\n# Objective\n\nIn this lesson, you will:\n\n- Explore technical and architectural differences between Ethereum and Solana.\n- Showcase how Solana distinguishes itself from Ethereum by utilizing different paradigms.\n- Understand how Solang integrates Solidity with the Solana account model.\n\n## tl:dr\n\nThis lessons take explores the technical and architectural differences between Solana and Ethereum. Solana stands out from Ethereum due to its unique blockchain structure, employing various programming approaches. It uses different paradigms and patterns for its account model, rent system, Cross-Program Invocation (CPI), and Program Derived Address (PDA), which will be covered in detail in this series.\n\n# Overview\n\n**The technical structure of blockchains sets Solana apart from Ethereum through distinct programming approaches**. Solana utilizes diverse paradigms and patterns, moulding its account model, rent system, Cross-Program Invocation (CPI), and Program Derived Address (PDA). These concepts will be explored in-depth in this series. This article centers on outlining the account model and its differences from Ethereum's architecture.\n\n## **Account Model:**\n\n- In Solana's runtime environment, known as Sealevel, the account model simplifies complex interactions. For preserving the transaction state, the mechanism involves accounts. These are like files in systems such as Linux, storing lasting data beyond program lifetimes.\n- Unlike traditional files, an account's longevity is tied to its rent, denoted in fractional native tokens known as lamports. These accounts live in validator memory and rely on rent to persist. Regular scans are conducted to collect rent, and accounts with zero lamports are deleted. **Accounts are considered rent-exempt if they maintain a smallest lamport balance**.\n- Solana's Sealevel, unlike Ethereum's EVM, has two distinct account types: executable (upgradeable) and non-executable (for mutable data). Unlike EVM, Sealevel allows contract data access in any account, but changes are limited to the designated \"owner\" for security.\n- Solana's storage approach differs from Ethereum's. Any Solana account can host state. , Solana's contract state is within other accounts. Each Solana account links to an owner contract, securing state change control.\n- In account-based blockchains like Ethereum and Solana, versatile on-chain data enhances decentralized applications. Yet, **EVM and Sealevel differ in state storage**. Ethereum's smart contracts manage storage, while Solana allows any account. Smart contract storage uses bytecode. Solana's state is in accounts, each linked to an owner contract for state changes.\n\nHere's a simplified comparison table highlighting the key differences between Solana and Ethereum their technical architecture and account models:\n\n| Aspect | Solana | Ethereum |\n| --- | --- | --- |\n| Account Model | Uses an account model referred to as accounts, which store data and bytecode. | Employs a single account for both storage and smart contract code. |\n| Data and Lamports | Accounts include Data and use fractional tokens called lamports for lifespan sign. | Ethereum uses gas for transaction cost estimation. |\n| Executable and Non-executable Accounts | Features two account types: executable (bytecode) and non-executable (mutable data). | Follows a basic account model for storage and code accounts for smart contracts. |\n| Storage Approach | Any account can host state; smart contract storage is confined to bytecode. | Smart contracts manage their storage. |\n| Ownership and Security | Each account has an owner contract to secure data changes and maintain integrity. | Ownership and control are linked to the Ethereum wallet address. |\n| Data Access | Contracts can read and write data in any account, but changes are limited to the account's \"owner\". | Smart contracts access data through the contract itself or external calls. |\n| Storage Flexibility and Encapsulation | Allows any account to host state, offering flexibility and encapsulation. | Offers more controlled storage for contracts, with data storage segregated. |\n| State Modification and Integrity | Ensures state changes are secured and validated through ownership contracts. | Requires proper coding practices to maintain data integrity and avoid vulnerabilities. |\n- On Ethereum, token contracts have a `mapping` which defines the balance for each owner address:\n\n```\nmapping (address => uint256) private _balances;\n\n```\n\n- On Solana, token balances are stored in unique accounts where the storage account address is derived from the address of the owner account.\n\n!https://res.cloudinary.com/practicaldev/image/fetch/s---VrOf4kR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm32bz33sxfb2m1er2dq.jpeg\n\nSolang integrates Solidity with the Solana account model by modifying existing code patterns and introducing new ones that are unique to Solana, making this complex undertaking possible. \n\nIn the next lesson we take a dive into smart contracts in Ethereum and Solana and develop a smart contract for Solana using Solidity.",
    "code": "var Component=(()=>{var la=Object.create;var j=Object.defineProperty;var ua=Object.getOwnPropertyDescriptor;var ca=Object.getOwnPropertyNames;var da=Object.getPrototypeOf,fa=Object.prototype.hasOwnProperty;var B=(c,r)=>()=>(r||c((r={exports:{}}).exports,r),r.exports),ma=(c,r)=>{for(var p in r)j(c,p,{get:r[p],enumerable:!0})},Se=(c,r,p,y)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let g of ca(r))!fa.call(c,g)&&g!==p&&j(c,g,{get:()=>r[g],enumerable:!(y=ua(r,g))||y.enumerable});return c};var ba=(c,r,p)=>(p=c!=null?la(da(c)):{},Se(r||!c||!c.__esModule?j(p,\"default\",{value:c,enumerable:!0}):p,c)),ha=c=>Se(j({},\"__esModule\",{value:!0}),c);var Ee=B((Sa,xe)=>{xe.exports=React});var Ne=B(G=>{\"use strict\";(function(){\"use strict\";var c=Ee(),r=Symbol.for(\"react.element\"),p=Symbol.for(\"react.portal\"),y=Symbol.for(\"react.fragment\"),g=Symbol.for(\"react.strict_mode\"),X=Symbol.for(\"react.profiler\"),H=Symbol.for(\"react.provider\"),K=Symbol.for(\"react.context\"),R=Symbol.for(\"react.forward_ref\"),A=Symbol.for(\"react.suspense\"),F=Symbol.for(\"react.suspense_list\"),D=Symbol.for(\"react.memo\"),I=Symbol.for(\"react.lazy\"),De=Symbol.for(\"react.offscreen\"),J=Symbol.iterator,Te=\"@@iterator\";function Ce(e){if(e===null||typeof e!=\"object\")return null;var a=J&&e[J]||e[Te];return typeof a==\"function\"?a:null}var x=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function m(e){{for(var a=arguments.length,n=new Array(a>1?a-1:0),t=1;t<a;t++)n[t-1]=arguments[t];Oe(\"error\",e,n)}}function Oe(e,a,n){{var t=x.ReactDebugCurrentFrame,l=t.getStackAddendum();l!==\"\"&&(a+=\"%s\",n=n.concat([l]));var u=n.map(function(s){return String(s)});u.unshift(\"Warning: \"+a),Function.prototype.apply.call(console[e],console,u)}}var Pe=!1,Ue=!1,je=!1,Ae=!1,Fe=!1,Z;Z=Symbol.for(\"react.module.reference\");function Ie(e){return!!(typeof e==\"string\"||typeof e==\"function\"||e===y||e===X||Fe||e===g||e===A||e===F||Ae||e===De||Pe||Ue||je||typeof e==\"object\"&&e!==null&&(e.$$typeof===I||e.$$typeof===D||e.$$typeof===H||e.$$typeof===K||e.$$typeof===R||e.$$typeof===Z||e.getModuleId!==void 0))}function Me(e,a,n){var t=e.displayName;if(t)return t;var l=a.displayName||a.name||\"\";return l!==\"\"?n+\"(\"+l+\")\":n}function Q(e){return e.displayName||\"Context\"}function v(e){if(e==null)return null;if(typeof e.tag==\"number\"&&m(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof e==\"function\")return e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case y:return\"Fragment\";case p:return\"Portal\";case X:return\"Profiler\";case g:return\"StrictMode\";case A:return\"Suspense\";case F:return\"SuspenseList\"}if(typeof e==\"object\")switch(e.$$typeof){case K:var a=e;return Q(a)+\".Consumer\";case H:var n=e;return Q(n._context)+\".Provider\";case R:return Me(e,e.render,\"ForwardRef\");case D:var t=e.displayName||null;return t!==null?t:v(e.type)||\"Memo\";case I:{var l=e,u=l._payload,s=l._init;try{return v(s(u))}catch{return null}}}return null}var S=Object.assign,w=0,ee,ae,ne,re,te,oe,ie;function se(){}se.__reactDisabledLog=!0;function Ve(){{if(w===0){ee=console.log,ae=console.info,ne=console.warn,re=console.error,te=console.group,oe=console.groupCollapsed,ie=console.groupEnd;var e={configurable:!0,enumerable:!0,value:se,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}w++}}function Ye(){{if(w--,w===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:S({},e,{value:ee}),info:S({},e,{value:ae}),warn:S({},e,{value:ne}),error:S({},e,{value:re}),group:S({},e,{value:te}),groupCollapsed:S({},e,{value:oe}),groupEnd:S({},e,{value:ie})})}w<0&&m(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var M=x.ReactCurrentDispatcher,V;function T(e,a,n){{if(V===void 0)try{throw Error()}catch(l){var t=l.stack.trim().match(/\\n( *(at )?)/);V=t&&t[1]||\"\"}return`\n`+V+e}}var Y=!1,C;{var $e=typeof WeakMap==\"function\"?WeakMap:Map;C=new $e}function le(e,a){if(!e||Y)return\"\";{var n=C.get(e);if(n!==void 0)return n}var t;Y=!0;var l=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var u;u=M.current,M.current=null,Ve();try{if(a){var s=function(){throw Error()};if(Object.defineProperty(s.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(s,[])}catch(_){t=_}Reflect.construct(e,[],s)}else{try{s.call()}catch(_){t=_}e.call(s.prototype)}}else{try{throw Error()}catch(_){t=_}e()}}catch(_){if(_&&t&&typeof _.stack==\"string\"){for(var i=_.stack.split(`\n`),b=t.stack.split(`\n`),d=i.length-1,f=b.length-1;d>=1&&f>=0&&i[d]!==b[f];)f--;for(;d>=1&&f>=0;d--,f--)if(i[d]!==b[f]){if(d!==1||f!==1)do if(d--,f--,f<0||i[d]!==b[f]){var h=`\n`+i[d].replace(\" at new \",\" at \");return e.displayName&&h.includes(\"<anonymous>\")&&(h=h.replace(\"<anonymous>\",e.displayName)),typeof e==\"function\"&&C.set(e,h),h}while(d>=1&&f>=0);break}}}finally{Y=!1,M.current=u,Ye(),Error.prepareStackTrace=l}var N=e?e.displayName||e.name:\"\",ye=N?T(N):\"\";return typeof e==\"function\"&&C.set(e,ye),ye}function We(e,a,n){return le(e,!1)}function Le(e){var a=e.prototype;return!!(a&&a.isReactComponent)}function O(e,a,n){if(e==null)return\"\";if(typeof e==\"function\")return le(e,Le(e));if(typeof e==\"string\")return T(e);switch(e){case A:return T(\"Suspense\");case F:return T(\"SuspenseList\")}if(typeof e==\"object\")switch(e.$$typeof){case R:return We(e.render);case D:return O(e.type,a,n);case I:{var t=e,l=t._payload,u=t._init;try{return O(u(l),a,n)}catch{}}}return\"\"}var P=Object.prototype.hasOwnProperty,ue={},ce=x.ReactDebugCurrentFrame;function U(e){if(e){var a=e._owner,n=O(e.type,e._source,a?a.type:null);ce.setExtraStackFrame(n)}else ce.setExtraStackFrame(null)}function qe(e,a,n,t,l){{var u=Function.call.bind(P);for(var s in e)if(u(e,s)){var i=void 0;try{if(typeof e[s]!=\"function\"){var b=Error((t||\"React class\")+\": \"+n+\" type `\"+s+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof e[s]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw b.name=\"Invariant Violation\",b}i=e[s](a,s,t,n,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(d){i=d}i&&!(i instanceof Error)&&(U(l),m(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",t||\"React class\",n,s,typeof i),U(null)),i instanceof Error&&!(i.message in ue)&&(ue[i.message]=!0,U(l),m(\"Failed %s type: %s\",n,i.message),U(null))}}}var ze=Array.isArray;function $(e){return ze(e)}function Be(e){{var a=typeof Symbol==\"function\"&&Symbol.toStringTag,n=a&&e[Symbol.toStringTag]||e.constructor.name||\"Object\";return n}}function Ge(e){try{return de(e),!1}catch{return!0}}function de(e){return\"\"+e}function fe(e){if(Ge(e))return m(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",Be(e)),de(e)}var k=x.ReactCurrentOwner,Xe={key:!0,ref:!0,__self:!0,__source:!0},me,be,W;W={};function He(e){if(P.call(e,\"ref\")){var a=Object.getOwnPropertyDescriptor(e,\"ref\").get;if(a&&a.isReactWarning)return!1}return e.ref!==void 0}function Ke(e){if(P.call(e,\"key\")){var a=Object.getOwnPropertyDescriptor(e,\"key\").get;if(a&&a.isReactWarning)return!1}return e.key!==void 0}function Je(e,a){if(typeof e.ref==\"string\"&&k.current&&a&&k.current.stateNode!==a){var n=v(k.current.type);W[n]||(m('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',v(k.current.type),e.ref),W[n]=!0)}}function Ze(e,a){{var n=function(){me||(me=!0,m(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",a))};n.isReactWarning=!0,Object.defineProperty(e,\"key\",{get:n,configurable:!0})}}function Qe(e,a){{var n=function(){be||(be=!0,m(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",a))};n.isReactWarning=!0,Object.defineProperty(e,\"ref\",{get:n,configurable:!0})}}var ea=function(e,a,n,t,l,u,s){var i={$$typeof:r,type:e,key:a,ref:n,props:s,_owner:u};return i._store={},Object.defineProperty(i._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(i,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:t}),Object.defineProperty(i,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:l}),Object.freeze&&(Object.freeze(i.props),Object.freeze(i)),i};function aa(e,a,n,t,l){{var u,s={},i=null,b=null;n!==void 0&&(fe(n),i=\"\"+n),Ke(a)&&(fe(a.key),i=\"\"+a.key),He(a)&&(b=a.ref,Je(a,l));for(u in a)P.call(a,u)&&!Xe.hasOwnProperty(u)&&(s[u]=a[u]);if(e&&e.defaultProps){var d=e.defaultProps;for(u in d)s[u]===void 0&&(s[u]=d[u])}if(i||b){var f=typeof e==\"function\"?e.displayName||e.name||\"Unknown\":e;i&&Ze(s,f),b&&Qe(s,f)}return ea(e,i,b,l,t,k.current,s)}}var L=x.ReactCurrentOwner,he=x.ReactDebugCurrentFrame;function E(e){if(e){var a=e._owner,n=O(e.type,e._source,a?a.type:null);he.setExtraStackFrame(n)}else he.setExtraStackFrame(null)}var q;q=!1;function z(e){return typeof e==\"object\"&&e!==null&&e.$$typeof===r}function pe(){{if(L.current){var e=v(L.current.type);if(e)return`\n\nCheck the render method of \\``+e+\"`.\"}return\"\"}}function na(e){{if(e!==void 0){var a=e.fileName.replace(/^.*[\\\\\\/]/,\"\"),n=e.lineNumber;return`\n\nCheck your code at `+a+\":\"+n+\".\"}return\"\"}}var ve={};function ra(e){{var a=pe();if(!a){var n=typeof e==\"string\"?e:e.displayName||e.name;n&&(a=`\n\nCheck the top-level render call using <`+n+\">.\")}return a}}function _e(e,a){{if(!e._store||e._store.validated||e.key!=null)return;e._store.validated=!0;var n=ra(a);if(ve[n])return;ve[n]=!0;var t=\"\";e&&e._owner&&e._owner!==L.current&&(t=\" It was passed a child from \"+v(e._owner.type)+\".\"),E(e),m('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',n,t),E(null)}}function ge(e,a){{if(typeof e!=\"object\")return;if($(e))for(var n=0;n<e.length;n++){var t=e[n];z(t)&&_e(t,a)}else if(z(e))e._store&&(e._store.validated=!0);else if(e){var l=Ce(e);if(typeof l==\"function\"&&l!==e.entries)for(var u=l.call(e),s;!(s=u.next()).done;)z(s.value)&&_e(s.value,a)}}}function ta(e){{var a=e.type;if(a==null||typeof a==\"string\")return;var n;if(typeof a==\"function\")n=a.propTypes;else if(typeof a==\"object\"&&(a.$$typeof===R||a.$$typeof===D))n=a.propTypes;else return;if(n){var t=v(a);qe(n,e.props,\"prop\",t,e)}else if(a.PropTypes!==void 0&&!q){q=!0;var l=v(a);m(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",l||\"Unknown\")}typeof a.getDefaultProps==\"function\"&&!a.getDefaultProps.isReactClassApproved&&m(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function oa(e){{for(var a=Object.keys(e.props),n=0;n<a.length;n++){var t=a[n];if(t!==\"children\"&&t!==\"key\"){E(e),m(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",t),E(null);break}}e.ref!==null&&(E(e),m(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),E(null))}}function ia(e,a,n,t,l,u){{var s=Ie(e);if(!s){var i=\"\";(e===void 0||typeof e==\"object\"&&e!==null&&Object.keys(e).length===0)&&(i+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var b=na(l);b?i+=b:i+=pe();var d;e===null?d=\"null\":$(e)?d=\"array\":e!==void 0&&e.$$typeof===r?(d=\"<\"+(v(e.type)||\"Unknown\")+\" />\",i=\" Did you accidentally export a JSX literal instead of a component?\"):d=typeof e,m(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",d,i)}var f=aa(e,a,n,l,u);if(f==null)return f;if(s){var h=a.children;if(h!==void 0)if(t)if($(h)){for(var N=0;N<h.length;N++)ge(h[N],e);Object.freeze&&Object.freeze(h)}else m(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else ge(h,e)}return e===y?oa(f):ta(f),f}}var sa=ia;G.Fragment=y,G.jsxDEV=sa})()});var ke=B((Ea,we)=>{\"use strict\";we.exports=Ne()});var ga={};ma(ga,{default:()=>_a,frontmatter:()=>pa});var o=ba(ke()),pa={title:\"Intro to solana\",author:\"shivam\",moduleNumber:\"module-1\",modulePart:\"module-1-a\",thisFileName:\"solidity-program-compilation\"};function Re(c){let r=Object.assign({h1:\"h1\",p:\"p\",ul:\"ul\",li:\"li\",h2:\"h2\",strong:\"strong\",code:\"code\",pre:\"pre\"},c.components);return(0,o.jsxDEV)(o.Fragment,{children:[(0,o.jsxDEV)(r.h1,{children:\"Technical Architecture Comparison (Accounts on Both Platforms)\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:9,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h1,{children:\"Objective\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:11,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"In this lesson, you will:\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:13,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"Explore technical and architectural differences between Ethereum and Solana.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:15,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Showcase how Solana distinguishes itself from Ethereum by utilizing different paradigms.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:16,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Understand how Solang integrates Solidity with the Solana account model.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:17,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:15,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h2,{children:\"tl:dr\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:19,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"This lessons take explores the technical and architectural differences between Solana and Ethereum. Solana stands out from Ethereum due to its unique blockchain structure, employing various programming approaches. It uses different paradigms and patterns for its account model, rent system, Cross-Program Invocation (CPI), and Program Derived Address (PDA), which will be covered in detail in this series.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:21,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h1,{children:\"Overview\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:23,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:[(0,o.jsxDEV)(r.strong,{children:\"The technical structure of blockchains sets Solana apart from Ethereum through distinct programming approaches\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:25,columnNumber:1},this),\". Solana utilizes diverse paradigms and patterns, moulding its account model, rent system, Cross-Program Invocation (CPI), and Program Derived Address (PDA). These concepts will be explored in-depth in this series. This article centers on outlining the account model and its differences from Ethereum's architecture.\"]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:25,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h2,{children:(0,o.jsxDEV)(r.strong,{children:\"Account Model:\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:27,columnNumber:4},this)},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:27,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"In Solana's runtime environment, known as Sealevel, the account model simplifies complex interactions. For preserving the transaction state, the mechanism involves accounts. These are like files in systems such as Linux, storing lasting data beyond program lifetimes.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:29,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:[\"Unlike traditional files, an account's longevity is tied to its rent, denoted in fractional native tokens known as lamports. These accounts live in validator memory and rely on rent to persist. Regular scans are conducted to collect rent, and accounts with zero lamports are deleted.\\xA0\",(0,o.jsxDEV)(r.strong,{children:\"Accounts are considered rent-exempt if they maintain a smallest lamport balance\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:30,columnNumber:287},this),\".\"]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:30,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:`Solana's Sealevel, unlike Ethereum's EVM, has two distinct account types: executable (upgradeable) and non-executable (for mutable data). Unlike EVM, Sealevel allows contract data access in any account, but changes are limited to the designated \"owner\" for security.`},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:31,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Solana's storage approach differs from Ethereum's. Any Solana account can host state. , Solana's contract state is within other accounts. Each Solana account links to an owner contract, securing state change control.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:32,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:[\"In account-based blockchains like Ethereum and Solana, versatile on-chain data enhances decentralized applications. Yet,\\xA0\",(0,o.jsxDEV)(r.strong,{children:\"EVM and Sealevel differ in state storage\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:33,columnNumber:124},this),\". Ethereum's smart contracts manage storage, while Solana allows any account. Smart contract storage uses bytecode. Solana's state is in accounts, each linked to an owner contract for state changes.\"]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:33,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:29,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"Here's a simplified comparison table highlighting the key differences between Solana and Ethereum their technical architecture and account models:\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:35,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:`| Aspect | Solana | Ethereum |\n| --- | --- | --- |\n| Account Model | Uses an account model referred to as\\xA0accounts, which store data and bytecode. | Employs a single account for both storage and smart contract code. |\n| Data and Lamports | Accounts include Data and use fractional tokens called\\xA0lamports\\xA0for lifespan sign. | Ethereum uses gas for transaction cost estimation. |\n| Executable and Non-executable Accounts | Features two account types:\\xA0executable\\xA0(bytecode) and\\xA0non-executable\\xA0(mutable data). | Follows a basic account model for storage and code accounts for smart contracts. |\n| Storage Approach | Any account can host state; smart contract storage is confined to bytecode. | Smart contracts manage their storage. |\n| Ownership and Security | Each account has an owner contract to secure data changes and maintain integrity. | Ownership and control are linked to the Ethereum wallet address. |\n| Data Access | Contracts can read and write data in any account, but changes are limited to the account's \"owner\". | Smart contracts access data through the contract itself or external calls. |\n| Storage Flexibility and Encapsulation | Allows any account to host state, offering flexibility and encapsulation. | Offers more controlled storage for contracts, with data storage segregated. |\n| State Modification and Integrity | Ensures state changes are secured and validated through ownership contracts. | Requires proper coding practices to maintain data integrity and avoid vulnerabilities. |`},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:37,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:[\"On Ethereum, token contracts have a\\xA0\",(0,o.jsxDEV)(r.code,{children:\"mapping\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:47,columnNumber:39},this),\"\\xA0which defines the balance for each owner address:\"]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:47,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:47,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.pre,{children:(0,o.jsxDEV)(r.code,{children:`mapping (address => uint256) private _balances;\n\n`},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:49,columnNumber:1},this)},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:49,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"On Solana, token balances are stored in unique accounts where the storage account address is derived from the address of the owner account.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:54,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:54,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"!https://res.cloudinary.com/practicaldev/image/fetch/s---VrOf4kR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm32bz33sxfb2m1er2dq.jpeg\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:56,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"Solang integrates Solidity with the Solana account model by modifying existing code patterns and introducing new ones that are unique to Solana, making this complex undertaking possible.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:58,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"In the next lesson we take a dive into smart contracts in Ethereum and Solana and develop a smart contract for Solana using Solidity.\"},void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:60,columnNumber:1},this)]},void 0,!0,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\",lineNumber:1,columnNumber:1},this)}function va(c={}){let{wrapper:r}=c.components||{};return r?(0,o.jsxDEV)(r,Object.assign({},c,{children:(0,o.jsxDEV)(Re,c,void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\"},this)}),void 0,!1,{fileName:\"/Users/shivamsoni/Desktop/Solang-Series/modules/module-1/module-1-a/_mdx_bundler_entry_point-b77633ff-0b27-430f-ae9c-f1a6aa8cadbe.mdx\"},this):Re(c)}var _a=va;return ha(ga);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "module-1/module-1-a/solidity-program-compilation.mdx",
  "_raw": {
    "sourceFilePath": "module-1/module-1-a/solidity-program-compilation.mdx",
    "sourceFileName": "solidity-program-compilation.mdx",
    "sourceFileDir": "module-1/module-1-a",
    "contentType": "mdx",
    "flattenedPath": "module-1/module-1-a/solidity-program-compilation"
  },
  "type": "Doc",
  "slug": "/module-1/module-1-a/solidity-program-compilation",
  "slugAsParams": "module-1-a/solidity-program-compilation",
  "headings": [
    {
      "level": 1,
      "text": "Technical Architecture Comparison (Accounts on Both Platforms)",
      "slug": "technical-architecture-comparison-accounts-on-both-platforms"
    },
    {
      "level": 1,
      "text": "Objective",
      "slug": "objective"
    },
    {
      "level": 2,
      "text": "tl:dr",
      "slug": "tldr"
    },
    {
      "level": 1,
      "text": "Overview",
      "slug": "overview"
    },
    {
      "level": 2,
      "text": "**Account Model:**",
      "slug": "account-model"
    }
  ]
}